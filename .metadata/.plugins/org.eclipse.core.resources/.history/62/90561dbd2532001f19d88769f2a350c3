package com.example.logviewe.service.play;

import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.example.logviewe.param.BattleAreaDto;
import com.example.logviewe.param.CardDto;
import com.example.logviewe.param.FieldDto;
import com.example.logviewe.param.GameInfo;
import com.example.logviewe.param.LogConst;
import com.example.logviewe.param.Play;
import com.example.logviewe.param.PlayId;
import com.example.logviewe.param.PlayerDto;
import com.example.logviewe.param.play.Bench;
import com.example.logviewe.param.play.Discard;
import com.example.logviewe.param.play.Draw;
import com.example.logviewe.param.play.PlayDetail;
import com.example.logviewe.param.play.Studium;
import com.example.logviewe.param.play.UseCard;
import com.example.logviewe.service.PokeApiService;
import com.fasterxml.jackson.core.JsonProcessingException;

public class PlayDetailAnalayzer extends PlayAnalazerBase implements PlayAnalayzer {
	Logger logger = LoggerFactory.getLogger(PlayDetailAnalayzer.class);
	
	@Override
	public Play getPlay(GameInfo gameInfo, String turnPlayer, String line) {
		// TODO Auto-generated method stub
		return getPlay(gameInfo,turnPlayer,line,null);
	}

	@Override
	public Play getPlay(GameInfo gameInfo, String turnPlayer, String line, List<String> subData) {
		PlayDetail playDetail = null;
		Play play = new Play();
		String msg = "";
		String imgUrl = "";
		BattleAreaDto field = (
				gameInfo.getPlayers().getMyName().equals(turnPlayer)?
						gameInfo.getField().getMyArea() : gameInfo.getField().getOppArea());
		//ベンチに出す
		if( line.endsWith(LogConst.TOBENCH)) {
			//ベンチにポケモンを出す
			//現状をコピーする
			copyNowStuation(play,PlayId.BENCH,gameInfo);
			String value = line.replace(turnPlayer+LogConst.PREFIX_PLAYED, "").replace(LogConst.TOBENCH, "");
			Bench bench = getToBench(value,field);
			msg = PlayId.BENCH.getMsg() + ":" + value;
			play.setPlayDetail(bench);
		}else if(line.endsWith(LogConst.TOSTUDIUM)) {
			//スタジアムを出す
			copyNowStuation(play,PlayId.STUDIUM,gameInfo);
			String value = line.replace(turnPlayer+LogConst.PREFIX_PLAYED, "").replace(LogConst.TOSTUDIUM, "");
			msg = PlayId.STUDIUM.getMsg() + ":" + value;
			Studium studium = getStudium(value);
			play.setPlayDetail(studium);
		}else {
			//何かを使った
			copyNowStuation(play,PlayId.PLAY,gameInfo);
			play = playAnything(gameInfo,turnPlayer,line,subData,field);
		}
		//play.setMsg(msg);
		//play.setImgUrl(imgUrl);
		return play;
	}
	
	/**
	 * 
	 * @param gameInfo
	 * @param turnPlayer
	 * @param line
	 * @param subData
	 * @param field
	 * @return
	 */
	private Play playAnything(
			GameInfo gameInfo,
			String turnPlayer, 
			String line, 
			List<String> subData,
			BattleAreaDto field) {
		Play play = new Play();
		UseCard useCard = new UseCard();
		String imgUrl;
		String msg = "";
		String value = line.replace(turnPlayer+LogConst.PREFIX_PLAYED, "");
		try {
			imgUrl = PokeApiService.findSmallImage(value);
		} catch (JsonProcessingException e) {
			// TODO Auto-generated catch block
			imgUrl = "";
		}
		msg = PlayId.PLAY.getMsg() + ":" + value;
		
		useCard.setImgUrl(imgUrl);
		useCard.setMsg(msg);
		
		//サブデータがある場合
		if( subData.size() > 0 ) {
			useCard.setSubPlayList(
					getSubPlayList(gameInfo,turnPlayer,subData)
					);
		}
		
		play.setPlayDetail(useCard);
		
		return play;
	}
}
