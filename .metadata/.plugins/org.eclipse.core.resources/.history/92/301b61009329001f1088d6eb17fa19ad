package com.example.logviewe.service.play;

import java.util.ArrayList;
import java.util.List;

import com.example.logviewe.param.BattleAreaDto;
import com.example.logviewe.param.FieldDto;
import com.example.logviewe.param.GameInfo;
import com.example.logviewe.param.LogConst;
import com.example.logviewe.param.Play;
import com.example.logviewe.param.PlayId;
import com.example.logviewe.param.PlayerDto;
import com.example.logviewe.param.play.Bench;
import com.example.logviewe.param.play.Draw;
import com.example.logviewe.param.play.PlayDetail;
import com.example.logviewe.param.play.UseCard;
import com.example.logviewe.service.PokeApiService;
import com.fasterxml.jackson.core.JsonProcessingException;

public class PlayDetailAnalayzer extends PlayAnalazerBase implements PlayAnalayzer {

	@Override
	public Play getPlay(GameInfo gameInfo, String turnPlayer, String line) {
		// TODO Auto-generated method stub
		return getPlay(gameInfo,turnPlayer,line,null);
	}

	@Override
	public Play getPlay(GameInfo gameInfo, String turnPlayer, String line, List<String> subData) {
		PlayDetail playDetail = null;
		Play play = new Play();
		String msg = "";
		String imgUrl = "";
		//ベンチに出す
		if( line.endsWith(LogConst.TOBENCH)) {
			//ベンチにポケモンを出す
			//現状をコピーする
			copyNowStuation(play,PlayId.BENCH,gameInfo);
			String value = line.replace(turnPlayer+LogConst.PREFIX_PLAYED, "").replace(LogConst.TOBENCH, "");
			msg = PlayId.BENCH.getMsg() + ":" + value;
		}else if(line.endsWith(LogConst.TOSTUDIUM)) {
			//スタジアムを出す
			copyNowStuation(play,PlayId.STUDIUM,gameInfo);
			String value = line.replace(turnPlayer+LogConst.PREFIX_PLAYED, "").replace(LogConst.TOSTUDIUM, "");
			msg = PlayId.STUDIUM.getMsg() + ":" + value;
		}else {
			//何かを使った
			play = playAnything(gameInfo,turnPlayer,line,subData);
		}
		//play.setMsg(msg);
		//play.setImgUrl(imgUrl);
		return play;
	}
	
	private Play playAnything(GameInfo gameInfo,String turnPlayer, String line, List<String> subData) {
		Play play = new Play();
		UseCard useCard = new UseCard();
		String imgUrl;
		String msg = "";
		copyNowStuation(play,PlayId.PLAY,gameInfo);
		String value = line.replace(turnPlayer+LogConst.PREFIX_PLAYED, "");
		try {
			imgUrl = PokeApiService.findSmallImage(value);
		} catch (JsonProcessingException e) {
			// TODO Auto-generated catch block
			imgUrl = "";
		}
		msg = PlayId.PLAY.getMsg() + ":" + value;
		
		useCard.setImgUrl(imgUrl);
		useCard.setMsg(msg);
		
		//サブデータがある場合
		if( subData.size() > 0 ) {
			useCard.setSubPlayList(
					getSubPlayList(gameInfo,turnPlayer,subData)
					);
		}
		
		play.setPlayDetail(useCard);
		
		return play;
	}
	
	private List<PlayDetail> getSubPlayList(GameInfo gameInfo,String turnPlayer,List<String> subData){
		int idx = 0;
		List<PlayDetail> playDetalList = new ArrayList<>();
		while(idx < subData.size()) {
			String subLine = subData.get(idx);
			if(subLine.startsWith(LogConst.PLAY_SUB_PREFIX)){
				if( subLine.startsWith(LogConst.PLAY_SUB_PREFIX+turnPlayer)) {
					//ターンプレイヤー
					subLine = subLine.replace(
							LogConst.PLAY_SUB_PREFIX+turnPlayer, "");
					playDetalList = getTurnPlayerSubData(
							gameInfo,turnPlayer,subLine,subData,idx
							);
					
				}
			}
			idx++;
		}
		
		return playDetalList;
	}
	
	private List<PlayDetail> getTurnPlayerSubData(
			GameInfo gameInfo,String turnPlayer,String subLine,List<String> subData,int idx
			){
		List<PlayDetail> playDetalList = new ArrayList<>();
		
		if(subLine.endsWith(LogConst.SUFFIX_TOBENCH)) {
			BattleAreaDto field = gameInfo.getField().getMyArea();
			playDetalList = getToBech(gameInfo,turnPlayer,subLine,field);
			gameInfo.getField().setMyArea(field);
			
		}else if(subLine.endsWith(LogConst.SUFFIX_THEMTOBENCH)) {
			idx++;
			String value = subData.get(idx);
			BattleAreaDto field = gameInfo.getField().getMyArea();
			playDetalList = getToBechList(gameInfo,turnPlayer,value,field);
			gameInfo.getField().setMyArea(field);
			//ターンプレイヤーがカードを引いた
		}else if( subLine.startsWith(LogConst.PREFIX_DRAW) ) {
			//引いたカードを取得
			idx++;
			String value = subData.get(idx);
			playDetalList = getTurnPlayerDrawCard(value);
		}else if( subLine.endsWith(LogConst.SUFFIX_SWITCH) ){
			//入れ替え
			
		}else if( subLine.endsWith(LogConst.SUFFIX_SHUFFUL) ){
			
		}
		
		return playDetalList;
	}
	
	private List<PlayDetail> playedSwitch(
			GameInfo gameInfo,
			String turnPlayer,
			String bench,
			BattleAreaDto field){
		List<PlayDetail> playDetalList = new ArrayList<>();
		
		return playDetalList;
	}

	/**
	 * 
	 * @param gameInfo
	 * @param turnPlayer
	 * @param bench
	 * @return
	 */
	private List<PlayDetail> getToBech(
			GameInfo gameInfo,
			String turnPlayer,
			String bench,
			BattleAreaDto field){
		List<PlayDetail> playDetalList = new ArrayList<>();
		
		String card = bench.replace(LogConst.PREFIX_DRAW, "").replace(LogConst.SUFFIX_TOBENCH, "");
		Bench benchObj = new Bench();
		benchObj.setDrawCard(PokeApiService.getCardDto(card));
		benchObj.setMsg(card + "をベンチを出した");
		benchObj.setImgUrl(benchObj.getDrawCard().getImgPath());
		playDetalList.add(benchObj);
		
		field.adddBechField(benchObj.getDrawCard());
		
		return playDetalList;
	}
	/**
	 * 
	 * @param gameInfo
	 * @param turnPlayer
	 * @param bench
	 * @return
	 */
	private List<PlayDetail> getToBechList(
			GameInfo gameInfo,String turnPlayer,String bench,BattleAreaDto field){

		List<PlayDetail> playDetalList = new ArrayList<>();
		
		String[] cards = bench.replace(LogConst.PLAY_CARD_PREFIX, "").split(",");
		for(String card : cards) {
			Bench benchObj = new Bench();
			benchObj.setDrawCard(PokeApiService.getCardDto(card));
			benchObj.setMsg(card + "をベンチを出した");
			benchObj.setImgUrl(benchObj.getDrawCard().getImgPath());
			playDetalList.add(benchObj);
		}

		//フィールドを更新;
		for(PlayDetail pd :  playDetalList) {
			field.adddBechField(((Bench)pd).getDrawCard());
		}
		
		return playDetalList;
	}
	private List<PlayDetail> getTurnPlayerDrawCard(String drawCardsStr){
		List<PlayDetail> playDetalList = new ArrayList<>();
		
		String[] cards = drawCardsStr.replace(LogConst.PLAY_CARD_PREFIX, "").split(",");
		for(String card : cards) {
			Draw draw = new Draw();
			draw.setDrawCard(PokeApiService.getCardDto(card));
			draw.setMsg(card + "を引いた");
			draw.setImgUrl(draw.getDrawCard().getImgPath());
			playDetalList.add(draw);
		}
		
		return playDetalList;
	}

}
