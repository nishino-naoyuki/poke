package com.example.logviewe.controller;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import com.example.logviewe.param.Hand;
import com.example.logviewe.param.PlayerDto;
import com.example.logviewe.service.LogAnalayzer;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;

@Controller
@RequestMapping(value= {"/battle"})
public class BattleController {
	private final LogAnalayzer logana;

	@Autowired
	public BattleController(LogAnalayzer logana) {
		this.logana = logana;
	}
	
	@RequestMapping(value= {""}, method=RequestMethod.POST)
    public ModelAndView fileInput(
    		ModelAndView mv,
    		@RequestParam MultipartFile battleFile
    		) throws JsonMappingException, JsonProcessingException   {
		
		List<String> fileContents = fileContents(battleFile);
		logana.Initialize(fileContents);
		PlayerDto pdto = logana.getPlayerNames();
		Hand hand = logana.getFirstHand(pdto.getMyName());
		
		mv.addObject("hand",hand);
    	mv.setViewName("sample");
    	
    	return mv;
    }
	
	private List<String> fileContents(MultipartFile uploadFile) {
        List<String> lines = new ArrayList<String>();
        String line = null;
        try {
            InputStream stream = uploadFile.getInputStream();           
            Reader reader = new InputStreamReader(stream);
            BufferedReader buf= new BufferedReader(reader);
            while((line = buf.readLine()) != null) {
                lines.add(line);
            }
            line = buf.readLine();

        } catch (IOException e) {
            line = "Can't read contents.";
            lines.add(line);
            e.printStackTrace();
        }
        return lines;
    }
}
